#db
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

spring.jpa.hibernate.ddl-auto=${DDL_AUTO}


#sql
spring.jpa.properties.hibernate.format_sql=true

server.error.include-message=always

#Configuração de health check
#Actuator
management.endpoint.health.show-details=always
#Prometheus
management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.prometheus.enabled=true

management.metrics.tags.aplicacao=${NOME_DA_APLICACAO:servico_de_proposta}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento}


#Configuração da Aplicação
#Consulta de restrição
proposta.apiexterna.consulta.url=${URL_API_CONSULTA}
proposta.apiexterna.consulta.nome=${NOME_API_CONSULTA}

#API estaerna de gereção de número de Cartão
proposta.apiexterna.cartao.url=${URL_API_CARTAO}
proposta.apiexterna.cartao.nome=${NOME_API_CARTAO}

#Thread de analise de pendências
proposta.pendencias.scheduled.fixeddelay=${TEMPO_ANALISE}
proposta.pendencias.scheduled.initialdelay=${INICIO_ANALISE}

#Thread de busca de solicitação de número de cartão
proposta.cartao.scheduled.fixeddelay=${TEMPO_CARTAO}
proposta.cartao.scheduled.initialdelay=${INICIO_CARTAO}

## spring security resource server configuration
#indicar nosso emissor de token e o endereço onde podemos encontrar as chaves e algoritmos para validar nossos tokens JWT
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://keycloak:8080/auth/realms/nosso-cartao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://keycloak:8080/auth/realms/nosso-cartao/protocol/openid-connect/certs}

