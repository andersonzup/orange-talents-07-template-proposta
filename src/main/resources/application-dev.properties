server.port=8081
#db
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5434/proposta_test?createDatabaseIfNotExist=TRUE
spring.datasource.username=developer
spring.datasource.password=1234567

#jpa
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update

#sql
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=false
server.error.include-message=always

#Configuração de health check
#Actuator
management.endpoint.health.show-details=always
#Prometheus
management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.prometheus.enabled=true

management.metrics.tags.aplicacao=servico_de_proposta
management.metrics.tags.ambiente=desenvolvimento

#Configuração da Aplicação
#Consulta de restrição
proposta.apiexterna.consulta.url=http://localhost:9999/api/solicitacao
proposta.apiexterna.consulta.nome=consultaRestricao

#API estaerna de gereção de número de Cartão
proposta.apiexterna.cartao.url=http://localhost:8888/api/cartoes
proposta.apiexterna.cartao.nome=geradorCartao

#Thread de analise de pendências
proposta.pendencias.scheduled.fixeddelay=600000
proposta.pendencias.scheduled.initialdelay=10000

#Thread de busca de solicitação de número de cartão
proposta.cartao.scheduled.fixeddelay=30000
proposta.cartao.scheduled.initialdelay=5000

## spring security resource server configuration
#indicar nosso emissor de token e o endereço onde podemos encontrar as chaves e algoritmos para validar nossos tokens JWT
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}
